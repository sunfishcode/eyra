name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: rustup update --no-self-update
    - run: cargo fmt --all -- --check

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    env:
      QEMU_BUILD_VERSION: 8.1.0
    strategy:
      matrix:
        build: [ubuntu, i686-linux, aarch64-linux, riscv64-linux]
        include:
          - build: ubuntu
            os: ubuntu-latest
            host_target: x86_64-unknown-linux-gnu
          - build: i686-linux
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
            gcc_package: gcc-i686-linux-gnu
            gcc: i686-linux-gnu-gcc
            libc_package: libc-dev-i386-cross
            host_target: i686-unknown-linux-gnu
          - build: aarch64-linux
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            qemu: qemu-aarch64 -L /usr/aarch64-linux-gnu
            qemu_target: aarch64-linux-user
            host_target: aarch64-unknown-linux-gnu
          - build: riscv64-linux
            os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            gcc_package: gcc-riscv64-linux-gnu
            gcc: riscv64-linux-gnu-gcc
            qemu: qemu-riscv64 -L /usr/riscv64-linux-gnu
            qemu_target: riscv64-linux-user
            host_target: riscv64gc-unknown-linux-gnu
    steps:
    - uses: actions/checkout@v4
    - name: Configure Cargo target
      run: |
        echo CARGO_BUILD_TARGET=${{ matrix.target }} >> $GITHUB_ENV
        rustup target add ${{ matrix.target }}
      if: matrix.target != ''

    - uses: actions/cache@v4
      with:
        path: ${{ runner.tool_cache }}/qemu
        key: qemu-${{ matrix.target }}-${{ env.QEMU_BUILD_VERSION }}-patched
      if: matrix.target != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation tools
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.gcc_package }} ninja-build
        upcase=$(echo ${{ matrix.host_target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_LINKER=${{ matrix.gcc }} >> $GITHUB_ENV
        echo CC_${{ matrix.target }}=${{ matrix.gcc }} >> $GITHUB_ENV
      if: matrix.gcc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation libraries
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.libc_package }}
      if: matrix.libc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install qemu
      run: |
        set -ex

        # Configure Cargo for cross compilation and tell it how it can run
        # cross executables
        upcase=$(echo ${{ matrix.host_target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_RUNNER=${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} >> $GITHUB_ENV

        # See if qemu is already in the cache
        if [ -f ${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ]; then
          exit 0
        fi

        # Download and build qemu from source since the most recent release is
        # way faster at arm emulation than the current version github actions'
        # ubuntu image uses. Disable as much as we can to get it to build
        # quickly.
        cd
        curl https://download.qemu.org/qemu-$QEMU_BUILD_VERSION.tar.xz | tar xJf -
        cd qemu-$QEMU_BUILD_VERSION
        patch -p1 < $GITHUB_WORKSPACE/ci/translate-errno.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/getsockopt-timeouts.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/s390x-stat-have-nsec.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/aarch64-o-largefile.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/tcgets2-tcsets2.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/tiocgsid.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/more-sockopts.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/pidfd-open.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/select-setsize.patch
        ./configure --target-list=${{ matrix.qemu_target }} --prefix=${{ runner.tool_cache }}/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs
        ninja -C build install
      if: matrix.qemu != '' && matrix.os == 'ubuntu-latest'

    - name: cargo test
      run: |
        cargo test
      env:
        RUST_BACKTRACE: 1
